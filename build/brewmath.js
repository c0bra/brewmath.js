// Generated by CoffeeScript 1.3.3
(function() {

  (function() {
    var Brewmath, VERSION, approx_tanh, brewmath, hasModule, maybe_tanh, other_tanh, rational_tanh, srmtohexmap, tanh;
    brewmath = void 0;
    VERSION = "0.0.1";
    hasModule = typeof module !== "undefined" && module.exports;
    Brewmath = function() {};
    brewmath = function() {
      return new Brewmath();
    };
    rational_tanh = function(x) {
      if (x < -3) {
        return -1;
      } else if (x > 3) {
        return 1;
      } else {
        return x * (27 + x * x) / (27 + 9 * x * x);
      }
    };
    approx_tanh = function(x) {
      return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
    };
    maybe_tanh = function(arg) {
      var neg, pos;
      pos = Math.exp(arg);
      neg = Math.exp(-arg);
      return (pos - neg) / (pos + neg);
    };
    other_tanh = function(x) {
      var e;
      e = Math.exp(2 * x);
      return (e - 1) / (e + 1);
    };
    tanh = function(x) {
      return other_tanh(x);
    };
    brewmath.StrikeTemperature = function(grainWeight, grainTemp, targetTemp, targetRatio) {
      return (0.2 / targetRatio) * (targetTemp - grainTemp) + targetTemp;
    };
    brewmath.abv = function(og, fg) {
      return parseFloat(((og - fg) * 131).toFixed(2));
    };
    brewmath.adf = function(og, fg) {
      return parseInt((100 * ((og - fg) / (og - 1))).toFixed(0));
    };
    brewmath.hbu = function(AApercent, weightOz) {
      return AApercent * weightOz;
    };
    brewmath.aau = function(AApercent, weightOz, volGal) {
      return AApercent * weightOz / volGal;
    };
    brewmath.ibu = function(AApercent, weightOz, volGal) {
      return AApercent * weightOz / volGal;
    };
    brewmath.utilizationRager = function(timeBoiledMin) {
      var util;
      util = (18.11 + 13.86 * tanh((timeBoiledMin - 31.32) / 18.27)) / 100;
      return util;
    };
    brewmath.bitternessRager = function(gravity, volGal, AApercent, weightOz, timeBoiledMin) {
      var AAdecimal, bu, gravityAdjustment, util;
      AAdecimal = parseFloat(AApercent) / 100;
      util = brewmath.utilizationRager(timeBoiledMin);
      gravityAdjustment = 0;
      if (gravity > 1.050) {
        gravityAdjustment = (gravity - 1.050) / 0.2;
      }
      bu = (weightOz * util * AAdecimal * 7462) / (volGal * (1 + gravityAdjustment));
      return bu;
    };
    brewmath.utilizationTinseth = function(gravity, timeBoiledMin) {
      var gravityUnits;
      gravityUnits = parseFloat(gravity) - 1;
      return 1.65 * Math.pow(0.000125, gravityUnits) * (1 - Math.exp(-0.04 * timeBoiledMin)) / 4.15;
    };
    brewmath.bitternessTinseth = function(gravity, volGal, AApercent, weightOz, timeBoiledMin) {
      var AAdecimal, bu, mgPerLiter, util;
      AAdecimal = parseFloat(AApercent) / 100;
      util = brewmath.utilizationTinseth(gravity, timeBoiledMin);
      mgPerLiter = AAdecimal * weightOz * 7490 / volGal;
      bu = mgPerLiter * util;
      return bu;
    };
    brewmath.SRMtoEBC = function(srm) {
      return srm * 1.97;
    };
    brewmath.EBCtoSRM = function(ebc) {
      return ebc * .508;
    };
    srmtohexmap = {
      1: '#F3F993',
      2: '#F5F75C',
      3: '#F6F513',
      4: '#EAE615',
      5: '#E0D01B',
      6: '#D5BC26',
      7: '#CDAA37',
      8: '#C1963C',
      9: '#BE8C3A',
      10: '#BE823A',
      11: '#C17A37',
      12: '#BF7138',
      13: '#BC6733',
      14: '#B26033',
      15: '#A85839',
      16: '#985336',
      17: '#8D4C32',
      18: '#7C452D',
      19: '#6B3A1E',
      20: '#5D341A',
      21: '#4E2A0C',
      22: '#4A2727',
      23: '#361F1B',
      24: '#261716',
      25: '#231716',
      26: '#19100F',
      27: '#16100F',
      28: '#120D0C',
      29: '#100B0A',
      30: '#050B0A'
    };
    brewmath.SRMtoHEX = function(srm) {
      if (srm < 1) {
        srm = 1;
      }
      if (srm > 30) {
        return '#000000';
      }
      srm = Math.floor(srm);
      return srmtohexmap[srm];
    };
    if (hasModule) {
      module.exports = brewmath;
    }
    if (typeof ender === "undefined") {
      this["brewmath"] = brewmath;
    }
    if (typeof define === "function" && define.amd) {
      return define("brewmath", [], function() {
        return brewmath;
      });
    }
  }).call(this);

}).call(this);
